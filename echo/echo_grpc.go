//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: flat

package echo

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for Echo service
type EchoClient interface{
  Echo(ctx context.Context, 
  	opts... grpc.CallOption) (Echo_EchoClient, error)  
}

type echoClient struct {
  cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
  return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, 
	opts... grpc.CallOption) (Echo_EchoClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[0], c.cc, "/echo.Echo/Echo", opts...)
  if err != nil { return nil, err }
  x := &echoEchoClient{stream}
  return x,nil
}

type Echo_EchoClient interface {
  Send(*flatbuffers.Builder) error
  Recv() (*Response, error)
  grpc.ClientStream
}

type echoEchoClient struct{
  grpc.ClientStream
}

func (x *echoEchoClient) Send(m *flatbuffers.Builder) error {
  return x.ClientStream.SendMsg(m)
}

func (x *echoEchoClient) Recv() (*Response, error) {
  m := new(Response)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for Echo service
type EchoServer interface {
  Echo(Echo_EchoServer) error  
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
  s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
  return srv.(EchoServer).Echo(&echoEchoServer{stream})
}

type Echo_EchoServer interface { 
  Send(* flatbuffers.Builder) error
  Recv() (* Request, error)
  grpc.ServerStream
}

type echoEchoServer struct {
  grpc.ServerStream
}

func (x *echoEchoServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}

func (x *echoEchoServer) Recv() (*Request, error) {
  m := new(Request)
  if err := x.ServerStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}


var _Echo_serviceDesc = grpc.ServiceDesc{
  ServiceName: "echo.Echo",
  HandlerType: (*EchoServer)(nil),
  Methods: []grpc.MethodDesc{
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "Echo",
      Handler: _Echo_Echo_Handler, 
      ServerStreams: true,
      ClientStreams: true,
    },
  },
}

